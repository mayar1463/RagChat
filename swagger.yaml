openapi: 3.0.0
info:
  title: RAG Chat API v1
  version: 1.0.0
servers:
  # The server URL is now the base URL, which allows for more flexible routing.
  - url: url
tags:
  - name: APIs
    description: All available application endpoints.
paths:
  # The path for the health check is now unversioned as requested.
  /api/health:
    get:
      summary: Health Check
      tags:
        - APIs
      description: Returns a simple JSON response to confirm that the service is up and running.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
  /api/v1/sessions:
    post:
      summary: Create session
      tags:
        - APIs
      description: |
        Creates a new session for the given user.
        - **Each user cannot have two sessions with the same `title`**.
        - If the same title already exists for the user, a `409 Conflict` is returned.
      parameters:
        - $ref: '#/components/parameters/APIKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - title
              properties:
                userId:
                  type: string
                  description: User ID (string or number as string)
                  minLength: 1
                  maxLength: 50
                  example: "user-123"
                title:
                  type: string
                  description: Title of the session (must be unique per user)
                  minLength: 1
                  maxLength: 255
                  example: "My first session"
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '409':
          description: Conflict — A session with this title already exists for this user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "A session with this title already exists for this user."

    get:
      summary: List sessions for user
      tags:
        - APIs
      parameters:
        - $ref: '#/components/parameters/APIKeyHeader'
        - in: query
          name: userId
          schema:
            type: string
          required: true
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: offset
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'

  /api/v1/sessions/{id}:
    get:
      summary: Get session
      tags:
        - APIs
      parameters:
        - $ref: '#/components/parameters/APIKeyHeader'
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'

    patch:
      summary: Rename session
      tags:
        - APIs
      description: |
        Updates the title of a session.
        - The new title must be unique for this user.
      parameters:
        - $ref: '#/components/parameters/APIKeyHeader'
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  description: New session title (must be unique for the user)
                  minLength: 1
                  maxLength: 255
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '409':
          description: Conflict — Title already exists for this user.

    delete:
      summary: Delete session and its messages
      tags:
        - APIs
      description: Delete the session identified by `id` and cascade-delete its messages.
      parameters:
        - $ref: '#/components/parameters/APIKeyHeader'
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Session and messages deleted successfully (No content)

  /api/v1/sessions/{id}/favorite:
    patch:
      summary: Mark/unmark favorite
      tags:
        - APIs
      parameters:
        - $ref: '#/components/parameters/APIKeyHeader'
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                isFavorite:
                  type: boolean
      responses:
        '200':
          description: OK

  /api/v1/sessions/{id}/messages:
    post:
      summary: Add message
      tags:
        - APIs
      parameters:
        - $ref: '#/components/parameters/APIKeyHeader'
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - sender
                - content
              properties:
                sender:
                  type: string
                  enum: [user, assistant]
                content:
                  type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

    get:
      summary: List messages for session
      tags:
        - APIs
      parameters:
        - $ref: '#/components/parameters/APIKeyHeader'
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: offset
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'

components:
  parameters:
    APIKeyHeader:
      in: header
      name: x-api-key
      required: true
      schema:
        type: string
      description: Your API key

  schemas:
    Session:
      type: object
      properties:
        id:
          type: integer
          example: 123
        userId:
          type: string
          example: "user-123 and unique_user_title (user_id, title)"
        title:
          type: string
          example: "My first session"
        isFavorite:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Message:
      type: object
      properties:
        id:
          type: integer
          example: 456
        sessionId:
          type: integer
          example: 123
        sender:
          type: string
          enum: [user, assistant]
          example: [user, assistant]
        content:
          type: string
          example: "Hello, what is the capital of France?"
        context:
          type: object
          example: { "key1": "value1" , "key2": "value2"}
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
