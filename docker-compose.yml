version: '3.8'

services:
  backend:
    build:
      context: .
      target: runtime
    volumes:
      - ./logs:/app/src/logs
    ports:
      - "${PORT}:${PORT}"
    environment:
      PORT: ${BACKEND_PORT}
      API_KEY: ${API_KEY}
      DB_HOST: ${DB_HOST}        
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_PORT: ${DB_PORT}
      RATE_LIMIT_WINDOW_MINUTES: ${RATE_LIMIT_WINDOW_MINUTES}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX}
    depends_on:
      db:
        condition: service_healthy # The 'backend' service now waits for 'db' to be healthy
    command: ["npm", "run", "start"]

  backend-test:
    build:
      context: .
      target: test
    environment:
      API_KEY: ${API_KEY}
      DB_HOST: ${DB_HOST}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_PORT: ${DB_PORT}
    depends_on:
      db:
        condition: service_healthy # The 'backend-test' service also waits for 'db' to be healthy
    command: ["npm", "test"]

  db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
    ports:
      - "${DB_HOST_PORT}:3306"
    command: --innodb-buffer-pool-size=64M
    volumes:
      - db_data:/var/lib/mysql
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u$$MYSQL_USER -p$$MYSQL_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db_data:
